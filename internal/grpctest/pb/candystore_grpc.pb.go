// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: candystore.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CandyStore_Buy_FullMethodName             = "/candystore.CandyStore/Buy"
	CandyStore_StreamCandyTo_FullMethodName   = "/candystore.CandyStore/StreamCandyTo"
	CandyStore_StreamCandyFrom_FullMethodName = "/candystore.CandyStore/StreamCandyFrom"
)

// CandyStoreClient is the client API for CandyStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CandyStoreClient interface {
	Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*Candy, error)
	StreamCandyTo(ctx context.Context, opts ...grpc.CallOption) (CandyStore_StreamCandyToClient, error)
	StreamCandyFrom(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CandyStore_StreamCandyFromClient, error)
}

type candyStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewCandyStoreClient(cc grpc.ClientConnInterface) CandyStoreClient {
	return &candyStoreClient{cc}
}

func (c *candyStoreClient) Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*Candy, error) {
	out := new(Candy)
	err := c.cc.Invoke(ctx, CandyStore_Buy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candyStoreClient) StreamCandyTo(ctx context.Context, opts ...grpc.CallOption) (CandyStore_StreamCandyToClient, error) {
	stream, err := c.cc.NewStream(ctx, &CandyStore_ServiceDesc.Streams[0], CandyStore_StreamCandyTo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &candyStoreStreamCandyToClient{stream}
	return x, nil
}

type CandyStore_StreamCandyToClient interface {
	Send(*Candy) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type candyStoreStreamCandyToClient struct {
	grpc.ClientStream
}

func (x *candyStoreStreamCandyToClient) Send(m *Candy) error {
	return x.ClientStream.SendMsg(m)
}

func (x *candyStoreStreamCandyToClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *candyStoreClient) StreamCandyFrom(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CandyStore_StreamCandyFromClient, error) {
	stream, err := c.cc.NewStream(ctx, &CandyStore_ServiceDesc.Streams[1], CandyStore_StreamCandyFrom_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &candyStoreStreamCandyFromClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CandyStore_StreamCandyFromClient interface {
	Recv() (*Candy, error)
	grpc.ClientStream
}

type candyStoreStreamCandyFromClient struct {
	grpc.ClientStream
}

func (x *candyStoreStreamCandyFromClient) Recv() (*Candy, error) {
	m := new(Candy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CandyStoreServer is the server API for CandyStore service.
// All implementations must embed UnimplementedCandyStoreServer
// for forward compatibility
type CandyStoreServer interface {
	Buy(context.Context, *BuyRequest) (*Candy, error)
	StreamCandyTo(CandyStore_StreamCandyToServer) error
	StreamCandyFrom(*emptypb.Empty, CandyStore_StreamCandyFromServer) error
	mustEmbedUnimplementedCandyStoreServer()
}

// UnimplementedCandyStoreServer must be embedded to have forward compatible implementations.
type UnimplementedCandyStoreServer struct {
}

func (UnimplementedCandyStoreServer) Buy(context.Context, *BuyRequest) (*Candy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (UnimplementedCandyStoreServer) StreamCandyTo(CandyStore_StreamCandyToServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCandyTo not implemented")
}
func (UnimplementedCandyStoreServer) StreamCandyFrom(*emptypb.Empty, CandyStore_StreamCandyFromServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCandyFrom not implemented")
}
func (UnimplementedCandyStoreServer) mustEmbedUnimplementedCandyStoreServer() {}

// UnsafeCandyStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandyStoreServer will
// result in compilation errors.
type UnsafeCandyStoreServer interface {
	mustEmbedUnimplementedCandyStoreServer()
}

func RegisterCandyStoreServer(s grpc.ServiceRegistrar, srv CandyStoreServer) {
	s.RegisterService(&CandyStore_ServiceDesc, srv)
}

func _CandyStore_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandyStoreServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandyStore_Buy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandyStoreServer).Buy(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandyStore_StreamCandyTo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CandyStoreServer).StreamCandyTo(&candyStoreStreamCandyToServer{stream})
}

type CandyStore_StreamCandyToServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Candy, error)
	grpc.ServerStream
}

type candyStoreStreamCandyToServer struct {
	grpc.ServerStream
}

func (x *candyStoreStreamCandyToServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *candyStoreStreamCandyToServer) Recv() (*Candy, error) {
	m := new(Candy)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CandyStore_StreamCandyFrom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CandyStoreServer).StreamCandyFrom(m, &candyStoreStreamCandyFromServer{stream})
}

type CandyStore_StreamCandyFromServer interface {
	Send(*Candy) error
	grpc.ServerStream
}

type candyStoreStreamCandyFromServer struct {
	grpc.ServerStream
}

func (x *candyStoreStreamCandyFromServer) Send(m *Candy) error {
	return x.ServerStream.SendMsg(m)
}

// CandyStore_ServiceDesc is the grpc.ServiceDesc for CandyStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandyStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "candystore.CandyStore",
	HandlerType: (*CandyStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Buy",
			Handler:    _CandyStore_Buy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCandyTo",
			Handler:       _CandyStore_StreamCandyTo_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamCandyFrom",
			Handler:       _CandyStore_StreamCandyFrom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "candystore.proto",
}
